var ExecList = require('../lib/ExecList');
var list = new ExecList();

list.pending(  // 可以准备任意多个任务
    function foo(p, next) {
        console.log("1111:", this == list) // 此函数中的this等于list
        if (p == 1) {
            // 如果成功，则不带参数地执行他，这样能才将整个任务列表的锁释放，
            // 否则任务列表始终处于锁定状态，无论怎么调用list.exec()都不会执行
            next();
        } else {
            // 如果失败，传递`一个`参数表示错误对象，此参数会传递给catch函数
            next('p!=1')
        }
    }
).pending(
    function foo(p, p2, p3, next) {
        if (p == 2)
            next()
        else
            next('p!=2')
    }
).pending(
    function foo(p, next) {
        if (p == 3)
            next()
        else
            next('p!=3')
    }
).catch(function (e) {  // 只能定义一个catch函数
    console.log('catch error:' + e);
})

// 依次调用将会依次执行任务列表，注意：如果任务没有调用next()通知当前任务已经执行完，之后的任务不会执行
list.exec(1);
list.exec(22, 2, 22); // 可以传递任意多个参数，注意：执行的目标函数必需有对应的参数列表
list.exec(33);     // 如果上一个任务没有执行完，此次调用会被完全忽略，不会产生任何效果